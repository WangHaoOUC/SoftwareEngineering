#include "pch.h"
#include <iostream>
using namespace std;
#include "./gdal/gdal_priv.h"
#pragma comment(lib,"gdal_i.lib")

int main()
{
	//输入图像
	GDALDataset* poSrcDS;
	//输出图像
	GDALDataset* poDstDS;
	//图像的高度和宽度
	int imgXlen, imgYlen;
	//输入图像路径
	const char* srcPath = "superman.jpg";
	//输出图像路径
	const char* dstPath = "BlackBackground.jpg";
	//图像内存存储
	GByte *buffTmp, *buffTmp1, *buffTmp2, *buffTmp3;
	//bandNum是通道数
	int i, j, bandNum;

	//注册驱动
	GDALAllRegister();
	//打开图像，poSrcDS初始化
	poSrcDS = (GDALDataset*)GDALOpenShared(srcPath, GA_ReadOnly);

	imgXlen = poSrcDS->GetRasterXSize();
	imgYlen = poSrcDS->GetRasterYSize();
	bandNum = poSrcDS->GetRasterCount();

	//分配内存
	buffTmp = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	//创建输出图像，poDstDS初始化
	poDstDS = GetGDALDriverManager()->GetDriverByName("GTiff")->Create
		(dstPath, imgXlen, imgYlen, bandNum, GDT_Byte, NULL);

	//一个个波段的输入，然后一个个波段的输出(为了生成一个黑色背景的superman)
	for (i = 0; i < bandNum; i++)
	{
		poSrcDS->GetRasterBand(i + 1)->RasterIO(GF_Read, 0, 0, imgXlen,
			imgYlen, buffTmp, imgXlen, imgYlen, GDT_Byte, 0, 0);
		poDstDS->GetRasterBand(i + 1)->RasterIO(GF_Write, 0, 0, imgXlen,
			imgYlen, buffTmp, imgXlen, imgYlen, GDT_Byte, 0, 0);
	}
	CPLFree(buffTmp);

	buffTmp1 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	//读取红色通道缓存在buffTmp1中
	poSrcDS->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmp1,
			imgXlen, imgYlen, GDT_Byte, 0, 0);

	buffTmp2 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	//读取绿色通道缓存在buffTmp2中
	poSrcDS->GetRasterBand(2)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmp2,
			imgXlen, imgYlen, GDT_Byte, 0, 0);
		
	buffTmp3 = (GByte*)CPLMalloc(imgXlen*imgYlen * sizeof(GByte));
	//读取蓝色通道缓存在buffTmp3中
	poSrcDS->GetRasterBand(3)->RasterIO(GF_Read, 0, 0, imgXlen, imgYlen, buffTmp3,
			imgXlen, imgYlen, GDT_Byte, 0, 0);
		
	//遍历整个图像，把某些像素置为0
	for (j = 0; j < imgYlen; j++)
		for (i = 0; i < imgXlen; i++)
		{
			if (buffTmp1[j*imgXlen + i] > 10 && buffTmp1[j*imgXlen + i] < 160
				&& buffTmp2[j*imgXlen + i] > 100 && buffTmp2[j*imgXlen + i] < 220
				&& buffTmp3[j*imgXlen + i] > 10 && buffTmp3[j*imgXlen + i] < 110)
				{
					buffTmp1[j*imgXlen + i] = (GByte)0;
					buffTmp2[j*imgXlen + i] = (GByte)0;
					buffTmp3[j*imgXlen + i] = (GByte)0;
				}
		}

	poDstDS->GetRasterBand(1)->RasterIO(GF_Write, 0, 0, imgXlen, imgYlen, buffTmp1, imgXlen,
		imgYlen, GDT_Byte, 0, 0);
	poDstDS->GetRasterBand(2)->RasterIO(GF_Write, 0, 0, imgXlen, imgYlen, buffTmp2, imgXlen,
		imgYlen, GDT_Byte, 0, 0);
	poDstDS->GetRasterBand(3)->RasterIO(GF_Write, 0, 0, imgXlen, imgYlen, buffTmp3, imgXlen,
		imgYlen, GDT_Byte, 0, 0);

	CPLFree(buffTmp1);
	CPLFree(buffTmp2);
	CPLFree(buffTmp3);

	GDALClose(poSrcDS);
	GDALClose(poDstDS);

	system("PAUSE");
	return 0;
}
