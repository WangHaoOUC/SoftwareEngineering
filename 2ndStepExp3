#include "pch.h"
#include <iostream>
using namespace std;
#include "./gdal/gdal_priv.h"
#pragma comment(lib,"gdal_i.lib")

int main()
{
	int i, j;

	//输入图像
	GDALDataset *poSrcDS1, *poSrcDS2;
	//输出图像
	GDALDataset *poDstDS1;
	//图像的高度和宽度
	int imgXlen1, imgYlen1, imgXlen2, imgYlen2;
	//两个输入图片和一个输出图片
	const char* srcPath1 = "BlackBackground.jpg";
	const char* srcPath2 = "space.jpg";
	const char* dstPath1 = "result.jpg";
	//图像内存存储
	GByte *buffTmp11, *buffTmp12, *buffTmp13,
		*buffTmp21, *buffTmp22, *buffTmp23;
	int bandNum1, bandNum2;

	GDALAllRegister();
	poSrcDS1 = (GDALDataset*)GDALOpenShared(srcPath1, GA_ReadOnly);
	poSrcDS2 = (GDALDataset*)GDALOpenShared(srcPath2, GA_ReadOnly);

	imgXlen1 = poSrcDS1->GetRasterXSize();
	imgYlen1 = poSrcDS1->GetRasterYSize();
	bandNum1 = poSrcDS1->GetRasterCount();
	imgXlen2 = poSrcDS2->GetRasterXSize();
	imgYlen2 = poSrcDS2->GetRasterYSize();
	bandNum2 = poSrcDS2->GetRasterCount();

	poDstDS1 = GetGDALDriverManager()->GetDriverByName("GTiff")->Create
	(dstPath1, imgXlen1, imgYlen1, bandNum1, GDT_Byte, NULL);

	buffTmp11 = (GByte*)CPLMalloc(imgXlen1 * imgYlen1 * sizeof(GByte));
	//读取黑色背景的superman图片的红色通道缓存在buffTmp11
	poSrcDS1->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, imgXlen1, imgYlen1, buffTmp11,
		imgXlen1, imgYlen1, GDT_Byte, 0, 0);

	buffTmp12 = (GByte*)CPLMalloc(imgXlen1 * imgYlen1 * sizeof(GByte));
	//读取黑色背景的superman图片的绿色通道缓存在buffTmp12
	poSrcDS1->GetRasterBand(2)->RasterIO(GF_Read, 0, 0, imgXlen1, imgYlen1, buffTmp12,
		imgXlen1, imgYlen1, GDT_Byte, 0, 0);

	buffTmp13 = (GByte*)CPLMalloc(imgXlen1 * imgYlen1 * sizeof(GByte));
	//读取黑色背景的superman图片的蓝色通道缓存在buffTmp11
	poSrcDS1->GetRasterBand(3)->RasterIO(GF_Read, 0, 0, imgXlen1, imgYlen1, buffTmp13,
		imgXlen1, imgYlen1, GDT_Byte, 0, 0);

	buffTmp21 = (GByte*)CPLMalloc(imgXlen2 * imgYlen2 * sizeof(GByte));
	//读取space.jpg的红色通道缓存在buffTmp21
	poSrcDS2->GetRasterBand(1)->RasterIO(GF_Read, 0, 0, imgXlen2, imgYlen2, buffTmp21,
		imgXlen2, imgYlen2, GDT_Byte, 0, 0);

	buffTmp22 = (GByte*)CPLMalloc(imgXlen2 * imgYlen2 * sizeof(GByte));
	//读取space.jpg的绿色通道缓存在buffTmp22
	poSrcDS2->GetRasterBand(2)->RasterIO(GF_Read, 0, 0, imgXlen2, imgYlen2, buffTmp22,
		imgXlen2, imgYlen2, GDT_Byte, 0, 0);

	buffTmp23 = (GByte*)CPLMalloc(imgXlen2 * imgYlen2 * sizeof(GByte));
	//读取space.jpg的蓝色通道缓存在buffTmp23
	poSrcDS2->GetRasterBand(3)->RasterIO(GF_Read, 0, 0, imgXlen2, imgYlen2, buffTmp23,
		imgXlen2, imgYlen2, GDT_Byte, 0, 0);

	for (j = 0; j < imgYlen1; j++)
		for (i = 0; i < imgXlen1; i++)
		{
			if (buffTmp11[j * imgXlen1 + i] == 0 && buffTmp12[j * imgXlen1 + i] == 0 &&
				buffTmp13[j * imgXlen1 + i] == 0)
			{
				buffTmp11[j * imgXlen1 + i] = buffTmp21[j * imgXlen1 + i];
				buffTmp12[j * imgXlen1 + i] = buffTmp22[j * imgXlen1 + i];
				buffTmp13[j * imgXlen1 + i] = buffTmp23[j * imgXlen1 + i];
			}
		}

	poDstDS1->GetRasterBand(1)->RasterIO(GF_Write, 0, 0, imgXlen1, imgYlen1,
		buffTmp11, imgXlen1, imgYlen1, GDT_Byte, 0, 0);
	poDstDS1->GetRasterBand(2)->RasterIO(GF_Write, 0, 0, imgXlen1, imgYlen1,
		buffTmp12, imgXlen1, imgYlen1, GDT_Byte, 0, 0);
	poDstDS1->GetRasterBand(3)->RasterIO(GF_Write, 0, 0, imgXlen1, imgYlen1,
		buffTmp13, imgXlen1, imgYlen1, GDT_Byte, 0, 0);

	CPLFree(buffTmp11);
	CPLFree(buffTmp12);
	CPLFree(buffTmp13);
	CPLFree(buffTmp21);
	CPLFree(buffTmp22);
	CPLFree(buffTmp23);

	GDALClose(poSrcDS1);
	GDALClose(poSrcDS2);
	GDALClose(poDstDS1);

	system("PAUSE");
	return 0;
}
